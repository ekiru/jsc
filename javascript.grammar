Program ::= 
    SourceElements EOF

SourceElements ::=
    SourceElement SourceElementsRest

SourceElementsRest ::= 
    empty
|   SourceElement SourceElementsRest

SourceElement ::= 
    Statement
|   FunctionDeclaration

FunctionDeclaration ::= 
    'function' Identifier '(' FormalParameterList? ')' '{' FunctionBody '}'

FunctionExpression ::=
    'function' Identifier? '(' FormalParameterList? ')' '{' FunctionBody '}'

FormalParameterList ::=
    Identifier FormalParameterListRest

FormalParameterListRest ::=
    empty
|   ',' Identifier FormalParameterListRest

FunctionBody ::=
    SourceElements?

Statement ::=
    Block
|   VariableStatement
|   EmptyStatement
|   ExpressionStatement
|   IfStatement
|   IterationStatement
|   ContinueStatement
|   BreakStatement
|   ReturnStatement
|   WithStatement
|   LabelledStatement
|   SwitchStatement
|   ThrowStatement
|   TryStatement
|   DebuggerStatement

Block ::=
    '{' StatementList? '}'

StatementList ::=
    Statement StatementListRest

StatementListRest ::=
    empty
|   Statement StatementListRest

VariableStatement ::=
    'var' VariableDeclarationList ';'

VariableDeclarationList ::=
    VariableDeclaration VariableDeclarationListRest

VariableDeclarationListRest ::=
    empty
|   VariableDeclaration VariableDeclarationListRest

VariableDeclarationListNoIn ::=
    VariableDeclarationNoIn VariableDeclarationNoInRest

VariableDeclarationListNoInRest ::=
    empty
|   ',' VariableDeclarationNoIn VariableDeclarationNoInRest

VariableDeclaration ::=
    Identifier Initialiser?

VariableDeclarationNoIn ::=
    Identifier InitialiserNoIn?

Initializser ::=
    '=' AssignmentExpression

InitialiserNoIn ::=
    '=' AssignmentExpressionNoIn

EmptyStatement ::=
    ';'

ExpressionStatement ::=
    Expression ';'	    -- Doesn't start with '{' or 'function'

IfStatement ::=
    'if' '(' Expression ')' Statement else Statement
|   'if' '(' Expression ')' Statement

IterationStatement ::=
    'do' Statement 'while' '(' Expression ')' ';'
|   'while' '(' Expression ')' Statement
|   'for' '(' ExpressionNoIn? ';' Expression? ';' Expression? ')' Statement
|   'for' '(' 'var' VariableDeclarationListNoIn ';' 
	Expression? ';' Expression? ')' Statement
|   'for' '(' LeftHandSideExpression 'in' Expression ')' Statement
|   'for' '(' 'var' VariableDeclarationNoIn 'in' Expression ')' Statement

ContinueStatement ::=
    'continue' Identifier? ';'

BreakStatement ::=
    'break' Identifier? ';'

ReturnStatement ::=
    'return' Expression? ';'

WithStatement ::=
    'with' '(' Expression ')' Statement

SwitchStatement ::=
    'switch' '(' Expression ')' CaseBlock

CaseBlock ::=
    '{' CaseClauses? '}'
|   '{' CaseClauses? DefaultClause CaseClauses? '}'

CaseClauses ::=
    CaseClause CaseClausesRest

CaseClausesRest ::=
    empty
|   CaseClause CaseClausesRest

CaseClause ::=
    'case' Expression ':' StatementList?

DefaultClause ::=
    'default' ':' StatementList?

LabelledStatement ::=
    Identifier ':' Statement

ThrowStatement ::=
    'throw' Expression ';'

TryStatement ::=
    'try' Block Catch
|   'try' Block Finally
|   'try' Block Catch Finally

Catch ::=
    'catch' '(' Identifier ')' Block

Finally ::=
    'finally' Block

DebuggerStatement ::=
    'debugger' ';'

PrimaryExpression ::=
    'this'
|   Identifier
|   Literal
|   ArrayLiteral
|   ObjectLiteral
|   '(' Expression ')

ArrayLiteral ::=
    '[' ']'
|   '[' Elision ']'
|   '[' Elision AssignmentExpression ElementListRest ']'
|   '[' AssignmentExpression ElementListRest ']'

ElementListRest ::=
    empty
|   ',' Elision AssignmentExpression ElementListRest
|   ',' AssignmentExpression ElementListRest
|   ',' ElementListRest

Elision ::=
    ',' ElisionRest

ElisionRest ::=
    empty
|   ',' ElisionRest

ObjectLiteral ::=
    '{' '}'
|   '{' PropertNameAndValueList '}'
|   '{' PropertyNameAndValueList ',' '}'

PropertyNameAndValueList ::=
    PropertyAssignment PropertyNameAndValueListRest
|   PropertyNameAndValueList ',' PropertyAssignment

PropertyNameAndValueListRest ::=
    empty
|   ',' PropertyAssignment PropertyNameAndValueListRest

PropertyAssignment ::=
    PropertyName ':' AssignmentExpression
|   'get' PropertyName '(' ')' '{' FunctionBody '}'
|   'set' PropertyName '(' PropertySetParameterList ')' '{' FunctionBody '}'

PropertyName ::=
    IdentifierName
|   StringLiteral
|   NumericLiteral

PropertySetParameterList ::=
    Identifier

MemberExpression ::=
    PrimaryExpression MemberExpressionRest
|   FunctionExpression MemberExpressionRest
|   'new' MemberExpression Arguments MemberExpressionRest
|   'new' MemberExpression MemberExpressionRest

MemberExpressionRest ::=
    empty
|   '[' Expression ']' MemberExpressionRest
|   '.' IdentifierName MemberExpressionRest

NewExpression ::=
    MemberExpression
|   'new' NewExpression

CallExpression ::=
    MemberExpression Arguments CallExpressionRest
|   CallExpression Arguments
|   CallExpression '[' Expression ']
|   CallExpression '.' IdentifierName

CallExpressionRest ::=
    empty
|   Arguments CallExpressionRest
|   '[' Expression ']' CallExpressionRest
|   '.' IdentifierName CallExpressionRest

Arguments ::=
    '(' ')'
    '(' ArgumentList ')'

ArgumentList ::=
    AssignmentExpression

ArgumentListRest ::=
    empty
|   ',' AssignmentExpression ArgumentListRest

LeftHandSideExpression ::=
    NewExpression
|   CallExpression

PostfixExpression ::=
    LeftHandSideExpression
|   LeftHandSideExpression '++'
|   LeftHandSideExpression '--'

UnaryExpression ::=
    PostfixExpression
|   'delete' UnaryExpression
|   'void' UnaryExpression
|   'typeof' UnaryExpression
|   '++' UnaryExpression
|   '--' UnaryExpression
|   '+' UnaryExpression
|   '-' UnaryExpression
|   '~' UnaryExpression
|   '!' UnaryExpression

MultiplicativeExpression ::=
    UnaryExpression MultiplicativeExpressionRest

MultiplicativeExpressionRest ::=
    empty
|   '*' UnaryExpression MultiplicativeExpressionRest
|   '/' UnaryExpression MultiplicativeExpressionRest
|   '%' UnaryExpression MultiplicativeExpressionRest

AdditiveExpression ::=
    MultiplicativeExpression AdditiveExpressionRest

AdditiveExpressionRest ::=
    empty
|   '+' MultiplicativeExpression AdditiveExpressionRest
|   '-' MultiplicativeExpression AdditiveExpressionRest

ShiftExpression ::=
    AdditiveExpression ShiftExpressionRest

ShiftExpressionRest ::=
    empty
|   '<<' AdditiveExpression ShiftExpressionRest
|   '>>' AdditiveExpression ShiftExpressionRest
|   '>>>' AdditiveExpression ShiftExpressionRest

RelationalExpression ::=
    ShiftExpression RelationalExpressionRest

RelationalExpressionRest ::=
    empty
|   '<' ShiftExpression RelationalExpressionRest
|   '>' ShiftExpression RelationalExpressionRest
|   '<=' ShiftExpression RelationalExpressionRest
|   '>=' ShiftExpression RelationalExpressionRest
|   'instanceof' ShiftExpression RelationalExpressionRest
|   'in' ShiftExpression RelationalExpressionRest

RelationalExpressionNoIn ::=
    ShiftExpression RelationalExpressionNoInRest

RelationalExpressionNoInRest ::=
    empty
|   '<' ShiftExpression RelationalExpressionNoInRest
|   '>' ShiftExpression RelationalExpressionNoInRest
|   '<=' ShiftExpression RelationalExpressionNoInRest
|   '>=' ShiftExpression RelationalExpressionNoInRest
|   'instanceof' ShiftExpression RelationalExpressionNoInRest

EqualityExpression ::=
    RelationalExpression EqualityExpressionRest

EqualityExpressionRest ::=
    emtpy
|   '==' RelationalExpression EqualityExpressionRest
|   '!=' RelationalExpression EqualityExpressionRest
|   '===' RelationalExpression EqualityExpressionRest
|   '!==' RelationalExpression EqualityExpressionRest

EqualityExpressionNoIn ::=
    RelationalExpressionNoIn EqualityExpressionNoInRest

EqualityExpressionNoInRest ::=
    empty
|   '==' RelationalExpressionNoIn EqualityExpressionNoInRest
|   '!=' RelationalExpressionNoIn EqualityExpressionNoInRest
|   '===' RelationalExpressionNoIn EqualityExpressionNoInRest
|   '!==' RelationalExpressionNoIn EqualityExpressionNoInRest

BitwiseAndExpression ::=
    EqualityExpression BitwiseAndExpressionRest

BitwiseAndExpressionRest ::=
    empty
|   '&' EqualityExpression BitwiseAndExpressionRest

BitwiseAndExpressionNoIn ::=
    EqualityExpressionNoIn BitwiseAndExpressionNoInRest

BitwiseAndExpressionNoInRest ::=
    empty
|   '&' EqualityExpressionNoIn BitwiseAndExpressionNoInRest

BitwiseXorExpression ::=
    BitwiseAndExpression BitwiseXorExpressionRest

BitwiseXorExpressionRest ::=
    empty
|   '^' BitwiseAndExpression BitwiseXorExpressionRest

BitwiseXorExpressionNoIn ::=
    BitwiseAndExpressionNoIn BitwiseXorExpressionNoInRest

BitwiseXorExpressionNoInRest ::=
    empty
|   '^' BitwiseAndExpressionNoIn BitwiseXorExpressionNoInRest

BitwiseOrExpression ::=
    BitwiseXorExpression BitwiseOrExpressionRest

BitwiseOrExpressionRest ::=
    empty
|   '|' BitwiseXorExpression BitwiseOrExpressionRest

BitwiseOrExpressionNoIn ::=
    BitwiseXorExpressionNoIn BitwiseOrExpressionNoInRest

BitwiseOrExpressionNoInRest ::=
    empty
|   '|' BitwiseXorExpressionNoIn BitwiseOrExpressionNoInRest

LogicalAndExpression ::=
    BitwiseOrExpression LogicalAndExpressionRest

LogicalAndExpressionRest ::=
    empty
|   '&&' BitwiseOrExpression LogicalAndExpressionRest

LogicalAndExpressionNoIn ::=
    BitwiseOrExpressionNoIn LogicalAndExpressionNoInRest

LogicalAndExpressionNoInRest ::=
    empty
|   '&&' BitwiseOrExpression LogicalAndExpressionNoInRest

LogicalOrExpression ::=
    LogicalAndExpression LogicalOrExpressionRest

LogicalOrExpressionRest ::=
    empty
|   '||' LogicalAndExpression LogicalOrExpressionRest

LogicalOrExpressionNoIn ::=
    LogicalAndExpressionNoIn LogicalOrExpressionNoInRest

LogicalOrExpressionNoInRest ::=
    empty
|   '||' LogicalAndExpressionNoIn LogicalOrExpressionNoInRest

ConditionalExpression ::=
    LogicalOrExpression
|   LogicalOrExpression '?' AssignmentExpression ':' AssignmentExpression

ConditionalExpressionNoIn ::=
    LogicalOrExpressionNoIn
|   LogicalOrExpressionNoIn '?' AssignmentExpressionNoIn 
	':' AssignmentExpressionNoIn

AssignmentExpression ::=
    ConditionalExpression
|   LeftHandSideExpression AssignmentOperator AssignmentExpression

AssignmentExpressionNoIn ::=
    ConditionalExpressionNoIn
|   LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn

AssignmentOperator ::=
    '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>='
|   '&=' | '^=' | '|='

Expression ::=
    AssignmentExpression ExpressionRest

ExpressionRest ::=
    empty
|   ',' AssignmentExpression ExpressionRest

ExpressionNoIn ::=
    AssignmentExpressionNoIn ExpressionNoInRest

ExpressionNoInRest ::=
    empty
|   ',' AssignmentExpressionNoIn ExpressionNoInRest
