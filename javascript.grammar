Program ::= SourceElements?

SourceElements ::= 
    SourceElement
|   SourceElements SourceElement

SourceElement ::= 
    Statement
|   FunctionDeclaration

FunctionDeclaration ::= 
    'function' Identifier '(' FormalParameterList? ')' '{' FunctionBody '}'

FunctionExpression ::=
    'function' Identifier? '(' FormalParameterList? ')' '{' FunctionBody '}'

FormalParameterList ::=
    Identifier
|   FormalParameterList ',' Identifier

FunctionBody ::=
    SourceElements?

Statement ::=
    Block
|   VariableStatement
|   EmptyStatement
|   ExpressionStatement
|   IfStatement
|   IfStatement
|   IterationStatement
|   ContinueStatement
|   BreakStatement
|   ReturnStatement
|   WithStatement
|   LabelledStatement
|   SwitchStatement
|   ThrowStatement
|   TryStatement
|   DebuggerStatement

Block ::=
    '{' StatementList? '}'

StatementList ::=
    Statement
|   StatementList Statement

VariableStatement ::=
    'var' VariableDeclarationList ';'

VariableDeclarationList ::=
    VariableDeclaration
|   VariableDeclarationList ',' VariableDeclaration

VariableDeclarationListNoIn ::=
    VariableDeclarationNoIn
|   VariableDeclarationListNoIn ',' VariableDeclarationNoIn

VariableDeclaration ::=
    Identifier Initialiser?

VariableDeclarationNoIn ::=
    Identifier InitialiserNoIn?

Initializser ::=
    '=' AssignmentExpression

InitialiserNoIn ::=
    '=' AssignmentExpressionNoIn

EmptyStatement ::=
    ';'

ExpressionStatement ::=
    Expression ';'	    -- Doesn't start with '{' or 'function'

IfStatement ::=
    'if' '(' Expression ')' Statement else Statement
|   'if' '(' Expression ')' Statement

IterationStatement ::=
    'do' Statement 'while' '(' Expression ')' ';'
|   'while' '(' Expression ')' Statement
|   'for' '(' ExpressionNoIn? ';' Expression? ';' Expression? ')' Statement
|   'for' '(' 'var' VariableDeclarationListNoIn ';' 
	Expression? ';' Expression? ')' Statement
|   'for' '(' LeftHandSideExpression 'in' Expression ')' Statement
|   'for' '(' 'var' VariableDeclarationNoIn 'in' Expression ')' Statement

ContinueStatement ::=
    'continue' Identifier? ';'

BreakStatement ::=
    'break' Identifier? ';'

ReturnStatement ::=
    'return' Expression? ';'

WithStatement ::=
    'with' '(' Expression ')' Statement

SwitchStatement ::=
    'switch' '(' Expression ')' CaseBlock

CaseBlock ::=
    '{' CaseClauses? '}'
|   '{' CaseClauses? DefaultClause CaseClauses? '}'

CaseClauses ::=
    CaseClause
|   CaseClauses CaseClause

CaseClause ::=
    'case' Expression ':' StatementList?

DefaultClause ::=
    'default' ':' StatementList?

LabelledStatement ::=
    Identifier ':' Statement

ThrowStatement ::=
    'throw' Expression ';'

TryStatement ::=
    'try' Block Catch
|   'try' Block Finally
|   'try' Block Catch Finally

Catch ::=
    'catch' '(' Identifier ')' Block

Finally ::=
    'finally' Block

DebuggerStatement ::=
    Debugger ';'

PrimaryExpression ::=
    'this'
|   Identifier
|   Literal
|   ArrayLiteral
|   ObjectLiteral
|   '(' Expression ')

ArrayLiteral ::=
    '[' Elision? ']'
|   '[' ElementList ']'
|   '[' ElementList ',' Elision? ']

ElementList ::=
    Elision? AssignmentExpression
|   ElementList ',' Elision? AssignmentExpression

Elision ::=
    ','
|   Elision ','

ObjectLiteral ::=
    '{' '}'
|   '{' PropertNameAndValueList '}'
|   '{' PropertyNameAndValueList ',' '}'

PropertyNameAndValueList ::=
    PropertyAssignment
|   PropertyNameAndValueList ',' PropertyAssignment

PropertyAssignment ::=
    PropertyName ':' AssignmentExpression
|   'get' PropertyName '(' ')' '{' FunctionBody '}'
|   'set' PropertyName '(' PropertySetParameterList ')' '{' FunctionBody '}'

PropertyName ::=
    IdentifierName
|   StringLiteral
|   NumericLiteral

PropertySetParameterList ::=
    Identifier

MemberExpression ::=
    PrimaryExpression
|   FunctionExpression
|   MemberExpression '[' Expression ']'
|   MemberExpression '.' IdentifierName
|   'new' MemberExpression Arguments

NewExpression ::=
    MemberExpression
|   'new' NewExpression

CallExpression ::=
    MemberExpression Arguments
|   CallExpression Arguments
|   CallExpression '[' Expression ']
|   CallExpression '.' IdentifierName

Arguments ::=
    '(' ')'
    '(' ArgumentList ')'

ArgumentList ::=
    AssignmentExpression
|   ArgumentList ',' AssignmentExpression

LeftHandSideExpression ::=
    NewExpression
|   CallExpression

PostfixExpression ::=
    LeftHandSideExpression
|   LeftHandSideExpression '++'
|   LeftHandSideExpression '--'

UnaryExpression ::=
    PostfixExpression
|   'delete' UnaryExpression
|   'void' UnaryExpression
|   'typeof' UnaryExpression
|   '++' UnaryExpression
|   '--' UnaryExpression
|   '+' UnaryExpression
|   '-' UnaryExpression
|   '~' UnaryExpression
|   '!' UnaryExpression

MultiplicativeExpression ::=
    UnaryExpression
|   MultiplicativeExpression '*' UnaryExpression
|   MultiplicativeExpression '/' UnaryExpression
|   MultiplicativeExpression '%' UnaryExpression

AdditiveExpression ::=
    MultiplicativeExpression
|   AdditiveExpression '+' MultiplicativeExpression
|   AdditiveExpression '-' MultiplicativeExpression

ShiftExpression ::=
    AdditiveExpression
|   ShiftExpression '<<' AdditiveExpression
|   ShiftExpression '>>' AdditiveExpression
|   ShiftExpression '>>>' AdditiveExpression

RelationalExpression ::=
    ShiftExpression
|   RelationalExpression '<' ShiftExpression
|   RelationalExpression '>' ShiftExpression
|   RelationalExpression '<=' ShiftExpression
|   RelationalExpression '>=' ShiftExpression
|   RelationalExpression 'instanceof' ShiftExpression
|   RelationalExpression 'in' ShiftExpression

RelationalExpressionNoIn ::=
    ShiftExpression
|   RelationalExpression '<' ShiftExpression
|   RelationalExpression '>' ShiftExpression
|   RelationalExpression '<=' ShiftExpression
|   RelationalExpression '>=' ShiftExpression
|   RelationalExpression 'instanceof' ShiftExpression

EqualityExpression ::=
    RelationalExpression
|   EqualityExpression '==' RelationalExpression
|   EqualityExpression '!=' RelationalExpression
|   EqualityExpression '===' RelationalExpression
|   EqualityExpression '!==' RelationalExpression

EqualityExpressionNoIn ::=
    RelationalExpressionNoIn
|   EqualityExpressionNoIn '==' RelationalExpressionNoIn
|   EqualityExpressionNoIn '!=' RelationalExpressionNoIn
|   EqualityExpressionNoIn '===' RelationalExpressionNoIn
|   EqualityExpressionNoIn '!==' RelationalExpressionNoIn

BitwiseAndExpression ::=
    EqualityExpression
|   BitwiseAndExpression '&' EqualityExpression

BitwiseAndExpressionNoIn ::=
    EqualityExpressionNoIn
|   BitwiseAndExpressionNoIn '&' EqualityExpressionNoIn

BitwiseXorExpression ::=
    BitwiseAndExpression
|   BitwiseXorExpression '^' BitwiseAndExpression

BitwiseXorExpressionNoIn ::=
    BitwiseAndExpressionNoIn
|   BitwiseXorExpressionNoIn '^' BitwiseAndExpressionNoIn

BitwiseOrExpression ::=
    BitwiseXorExpression
|   BitwiseOrExpression '|' BitwiseXorExpression

BitwiseOrExpressionNoIn ::=
    BitwiseXorExpressionNoIn
|   BitwiseOrExpressionNoIn '|' BitwiseXorExpressionNoIn

LogicalAndExpression ::=
    BitwiseOrExpression
|   LogicalAndExpression '&&' BitwiseOrExpression

LogicalAndExpressionNoIn ::=
    BitwiseOrExpressionNoIn
|   LogicalAndExpressionNoIn '&&' BitwiseOrExpression

LogicalOrExpression ::=
    LogicalAndExpression
|   LogicalOrExpression '||' LogicalAndExpression

LogicalOrExpressionNoIn ::=
    LogicalAndExpressionNoIn
|   LogicalOrExpressionNoIn '||' LogicalAndExpressionNoIn

ConditionalExpression ::=
    LogicalOrExpression
|   LogicalOrExpression '?' AssignmentExpression ':' AssignmentExpression

ConditionalExpressionNoIn ::=
    LogicalOrExpressionNoIn
|   LogicalOrExpressionNoIn '?' AssignmentExpressionNoIn 
	':' AssignmentExpressionNoIn


AssignmentExpression ::=
    ConditionalExpression
|   LeftHandSideExpression AssignmentOperator AssignmentExpression

AssignmentExpressionNoIn ::=
    ConditionalExpressionNoIn
|   LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn

AssignmentOperator ::=
    '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>='
|   '&=' | '^=' | '|='

Expression ::=
    AssignmentExpression
|   Expression ',' AssignmentExpression

ExpressionNoIn ::=
    AssignmentExpressionNoIn
|   ExpressionNoIn ',' AssignmentExpressionNoIn
